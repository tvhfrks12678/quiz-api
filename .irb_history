Time.zone.name
Time.current
exit
Time.utc(2020,4,1,12) 
Time.local(2020,4,1,12)
Time.now.zone
time = Time.new(2020,4,1,12)
time = Time.new(2020,4,1,12)
User.create(name: "utc", email: "utc@examle.com", password_digest: "password", created_at: time)
I18n.locale
exit
I18n.locale
exit
Rails.autoloaders.zeitwerk_enabled?
exit
Hirb.enable
exit
Hirb::View.enabled?
Hirb::Helpers::Table.render [[1,2], [2,3]]
puts Hirb::Helpers::Table.render [[1,2], [2,3]]
puts Hirb::Helpers::Table.render [{:age=>10, :weight=>100}, {:age=>80, :weight=>500}]
Hirb::View.width
tput cols`.to_i\
`tput cols`.to_i
`tput cols`.to_i
` tput cols`.to_i
`tput cols`.to_i
`tput cols`.to_i
Hirb::View.resize(112)
Hirb.disable
exit
user = User.new
user.save
user.errors.full_messages
I18n.t("activerecord.attributes.user")
I18n.t("activerecord.attributes.user")
user
exit
user = User.new
user.save
user.errors.full_messages
I18n.t("activerecord.attributes.user")
user.password = "ああああああああ"
user.save
user.errors.full_messages
exit
user = User.new
user.save
user.errors.full_messages
exit
user = User.new
user.save
user.errors.full_messages
I18n.t("activerecord.attributes.user")
user.password = "ああああああああ"
user.save
user.errors.full_messages
exit
user = User.new
user.save
user.errors.full_messages
user.password = "ああああああああ"
user.save
user.errors.full_messages
exit
user
y
users
user = User.new
user.save
user.errors.full_messages
user.password = "ああああああああ"
user.save
user.errors.full_messages
exit
user.password = "ああああああああ"
user.password = "ああああああああ"
user.save
user = User.new
user.password = "ああああああああ"
user.save
user.errors.full_messages
exit
user = User.new
user.save
user.errors.full_messages
exit
user = User.new
user.save
user.errors.full_messages
user.password = "ああああああああ"
user.save
user.errors.full_messages
exit
user = User.new(name: "test", email: "test@example.com", password: "password")
user = User.new(name: "test", email: "test@example.com", password: "password")
exit
user = User.new(name: "test", email: "test@example.com", password: "password")
exit
user = User.new(name: "test", email: "test@example.com", password: "password")
user.save
exit
domain = "@example.com"
email = "a" * (256 - domain.length) + domain
email.length
user = User.new(name: "test", email: email, password: "password")
exit
domain = "@example.com"
email = "a" * (256 - domain.length) + domain
email.length
user = User.new(name: "test", email: email, password: "password")
user = User.new(name: "test", email: email, password: "password")
user = User.new(name: "test", email: email, password: "password")
exit
domain = "@example.com"
email = "a" * (256 - domain.length) + domain
email.length
user = User.new(name: "test", email: email, password: "password")
user = User.new(name: "test", email: email, password: "password")
user = User.new(name: "test", email: email, password: "password")
exit
domain = "@example.com"
email = "a" * (256 - domain.length) + domain
email.length
user = User.new(name: "test", email: email, password: "password")
user.save
user.errors.full_messages
email = "test@example@com"
user.email = email
user.save
user.errors.full_messages
email = "active@example.com"
User.create(name: "active", email: email, password: "password", activated: true)
user = User.new(name: "test", email: email, password: "password")
user.save
user.errors.full_messages
email = "TEST@test.COM"
user = User.new(name: "test", email: email, password: "password")
user.save
user.email
exit
User.all
exit
email = "test@example@com"
user.email = email
user = User.new(name: "test", email: email, password: "password")
user.save
user.errors.full_messages
exit
user = User.new
user.save
user.errors.full_messages
quiz = Quiz.new
quiz.save
quiz.errors.full_messages
exit
quiz_01 = Quiz.new(question: 'DOTAMAがB-BOY PARK 2003に出場した時のMCネームは？',\
  answer_01: 'ドタマ',\
  answer_02: '怒頭',\
  answer_03: 'ドクタートチギ',\
  answer_04: 'MCメガネ',\
                      correct_no: '2')
quiz_01
quizItem = Quiz.find_or_initialize_by(question: 'DOTAMAがB-BOY PARK 2003に出場した時のMCネームは？',\
  answer_01: 'ドタマ',\
  answer_02: '怒頭',\
  answer_03: 'ドクタートチギ',\
  answer_04: 'MCメガネ',\
                                        correct_no: '2')
if quizItem.new_record?\
  quizItem.save!\
end
exit
quizItem = Quiz.find_or_initialize_by(question: 'DOTAMAがB-BOY PARK 2003に出場した時のMCネームは？',\
  answer_01: 'ドタマ',\
  answer_02: '怒頭',\
  answer_03: 'ドクタートチギ',\
  answer_04: 'MCメガネ',\
                                        correct_no: '2')
if quizItem.new_record?\
  quizItem.save!\
end
exit
User.all
Quizzes.all
Quiz.all
quizItem = Quiz.find_or_initialize_by(question: 'DOTAMAがB-BOY PARK 2003に出場した時のMCネームは？',\
  explanation: '',\
  answer_01: 'ドタマ',\
  answer_02: '怒頭',\
  answer_03: 'ドクタートチギ',\
  answer_04: 'MCメガネ',\
                                        correct_no: '2')
  
if quizItem.new_record?\
  quizItem.save!\
end
quizItem1 = Quiz.find_or_initialize_by(question: '戦極MC第5章で「斎藤一、内容真面目、相性悪いね、才能無いね」のワードを使ったMCは？',\
  explanation: '',\
  answer_01: 'ノン・アルコール',\
  answer_02: 'SIMON JAP',\
  answer_03: 'チプルソ',\
  answer_04: 'TK da 黒ぶち',\
                                        correct_no: '3')
  
if quizItem1.new_record?\
  quizItem1.save!\
end
quizItem2 = Quiz.find_or_initialize_by(question: 'UMB2019の決勝の組み合わせとして正しいのは？',\
  explanation: '',\
  answer_01: 'ふぁんく VS 早雲',\
  answer_02: 'Authority VS SHAMO',\
  answer_03: 'ふぁんく VS SHAMO',\
  answer_04: 'Authority VS 早雲',\
                                        correct_no: '4')
  
if quizItem2.new_record?\
  quizItem2.save!\
end
Quiz.All
Quiz.All
Quiz.all
exit
Quiz.all
exit
tagtest = Tag.new('aaa')
tagtest = Tag.new("aaa")
users = User.all
users
quizs=Quiz.all
quiz
quizs
tag1 = Tag.create(name:"dotaman",quiz_id:1)
tags = Tag.all
tags
exit
users = User.all
users
tagItem = Tag.find_or_initialize_by(name: 'DOTAMA',\
                                        user_id: 1)
  
if tagItem.new_record?\
  tagItem.save!\
end
quizItem = Quiz.find_or_initialize_by(question: 'DOTAMAがB-BOY PARK 2003に出場した時のMCネームは？',\
  explanation: '',\
  answer_01: 'ドタマ',\
  answer_02: '怒頭',\
  answer_03: 'ドクタートチギ',\
  answer_04: 'MCメガネ',\
                                        correct_no: '2')
  
if quizItem.new_record?\
  quizItem.save!\
end
tagItem = Tag.find_or_initialize_by(name: 'DOTAMA',\
                                        user_id: 1)
  
if tagItem.new_record?\
  tagItem.save!\
end
User.all
users = User.all
users
exit
quizItem = Quiz.find_or_initialize_by(question: 'DOTAMAがB-BOY PARK 2003に出場した時のMCネームは？',\
  explanation: '',\
  answer_01: 'ドタマ',\
  answer_02: '怒頭',\
  answer_03: 'ドクタートチギ',\
  answer_04: 'MCメガネ',\
                                        correct_no: '2')
  
if quizItem.new_record?\
  quizItem.save!\
end
tagItem = Tag.find_or_initialize_by(name: 'DOTAMA',\
                                        quiz_id: 1)
  
if tagItem.new_record?\
  tagItem.save!\
end
exit
tagItem = Tag.find_or_initialize_by(name: 'DOTAMA',\
                                        quiz_id: 1)
  
if tagItem.new_record?\
  tagItem.save!\
end
Tag.all
tagItem = Tag.find_or_initialize_by(name: 'B-BOY PARK',\
                                        quiz_id: 1)
  
if tagItem.new_record?\
  tagItem.save!\
end
Tag.all
Quiz.all
test=Quiz.find(1)
test
test.tags.create(name: "メガネ")
Tags.all
Tags.All
Tag.All
Tag.all
quizList = Quiz.all.includes(:tags)
quizList
quizList[0]
quizList[0].question
quizList[0].tag
quizList[0].tag[0]
quizList[0].tags
quizList[0].tags[0]
quizList = Quiz.all.includes(:tags)
quizList
render json: quizList
json: quizList
    def index\
      quizList = Quiz.all\
      render json: quizList.as_json(only: [:question, :answer_01, :answer_02, :answer_03, :answer_04, :correct_no])\
      # quizList = Quiz.all.includes(:tags)\
      # render json: quizList\
    end
index
:index
index()
index
quizList = Quiz.all.includes(:tags)
quizList
quizList.tags
quizList[0].tags
json: quizList
Quiz.all.to_json(include: :tags)
a=Quiz.all.to_json(include: :tags)
a
a[0]
quizList = Quiz.all.includes(:tags)
json: quizList
